function [ ] = prettyPrint( M, dataName, filePath)
%PRETTYPRINT Print scalars, vectors and matricies to header file.
%   Useful for creating testvectors.

% path is optional
if ~exist('filePath', 'var')
    filePath = './';
end

fileName = sprintf('%s.h', dataName);
fileNameAndPath = sprintf('%s%s', filePath, fileName);
fh = fopen(fileNameAndPath, 'w');

% opening statement
fprintf(fh, '/* DO NOT EDIT! \n * this file is generated by MATLAB \n (or you know.. probably by Octave).\n */\n\n');

% arrays need to be a row vector, transpose input in case of column vector
if size(M,2) == 1 && size(M,1) > 1
    M = M.';
end

% type definition
if     isa(M, 'int32')
    fprintf(fh,'static const int32_t %s', dataName);
elseif isa(M, 'int16')
    fprintf(fh,'static const int16_t %s', dataName);
elseif isa(M, 'double')
    fprintf(fh,'static int %s', dataName);
else
    fclose(fh);
    error('Unexpected type!')
end

% print scalar, array or matrix?
if length(M) == 1
    fprintf(fh, ' = ');
else
    if size(M,2) == 1
    fprintf(fh, '[%u] =\n{\n', length(M));
    else
    fprintf(fh, '[%u][%u] =\n{\n', size(M));
    end
end

% print a certain number of inputs per line
numbersPerLine = 4 * (isreal(M) + 1);

for a=1:size(M,1)
    if size(M,1) == 1
        arr = M;
    else
        arr = M(a,:);
        fprintf(fh, ' {\n');
    end
    for i=1:floor(length(arr)/numbersPerLine)
        fprintf(fh, '  '); %indent
        for j=1:numbersPerLine
            idxToPrint = (i-1) * numbersPerLine + j;
            printType(fh, arr(idxToPrint));
        end
        fseek(fh, -1, 'eof'); % eat the space before newline
        fprintf(fh, '\n');
    end

    % print a last line with less than numbersPerLine
    if mod(length(arr), numbersPerLine) > 0
        if length(M) ~= 1
            fprintf(fh, '  '); %indent
        end
        for i=1:mod(length(arr), numbersPerLine)
            idxToPrint = floor(length(arr)/numbersPerLine) * numbersPerLine + i;
            printType(fh, arr(idxToPrint));
        end
        fseek(fh, -1, 'eof'); % eat the space before newline
        fprintf(fh, '\n');
    end
    
    if size(M,2) ~= 1
        fprintf(fh, ' },\n');
    end

end

% needless nitpicking (eat the comma after the last number)
fseek(fh, -2, 'eof');

% closing statement
if length(M) == 1
    fprintf(fh, ';\n'); %scalars
else
    fprintf(fh, '\n};\n\n'); %vectors & matricies
end

% Suppress lint warning
fprintf(fh, '//lint -efile(967, %s) no standard include guards\n', fileName);

fclose(fh);
end

function printType (fh, val)
    if     isa(val, 'int32')
        fprintf(fh, '0x%08X, ', val);
    elseif isa(val, 'int16')
        fprintf(fh, '0x%04X, ', val);
    elseif isa(val, 'double')
        fprintf(fh, '%4d, ', val)
    end
end
            
